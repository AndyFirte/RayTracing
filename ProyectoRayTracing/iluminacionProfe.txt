
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include "math_functions.h"
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

#include <stdio.h>

struct sphere
{
	float radio;
	float x;
	float y;
	float z;
	//Propiedades esfera
	uchar r,g,b;
};
struct ray
{
	float o_x;
	float o_y;
	float o_z;
	float dir_x;
	float dir_y;
	float dir_z;
};

struct light
{
	float radio;
	float x;
	float y;
	float z;
	uchar r;
	uchar g;
	uchar b;
};
struct vector3
{
	float x;
	float y;
	float z;
};

__device__ void normaliza(vector3 * vector)
{
	float aux = sqrtf(vector->x * vector->x + vector->y * vector->y + vector->z * vector->z);
	vector->x /= aux;
	vector->y /= aux;
	vector->z /= aux;

}
__device__ bool sphereInter(ray *ray_test, sphere * obj, float *dist)
{
	float vX, vY, vZ;
	float discrimiante;

	float a, b, c;

	vX = ray_test->o_x - obj->x;
	vY = ray_test->o_y - obj->y;
	vZ = ray_test->o_z - obj->z;

	a = (ray_test->dir_x * ray_test->dir_x + ray_test->dir_y * ray_test->dir_y + ray_test->dir_z * ray_test->dir_z);
	b = 2.0f * (vX * ray_test->dir_x + vY * ray_test->dir_y + vZ * ray_test->dir_z);
	c = (vX * vX + vY * vY + vZ * vZ) - (obj->radio * obj->radio);
	discrimiante = (b * b) - (4 * a * c);
	if (discrimiante < 0.0f)
		return false;
	else
	{
		*dist = (-b - sqrtf(discrimiante)) / (2.0f * a);
		return true;

	}
	
	return false;

}

__device__ vector3 phongShading(light * luz, vector3* point, vector3* normal, vector3 *camera, vector3 * color )
{
	float ambiental = 0.2;
	float difuso = 0.5;
	float specular = 0.2;

	vector3 colorSalida;
	colorSalida.x = 0;
	colorSalida.y = 0;
	colorSalida.z = 0;

	///AMBIENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLL
	colorSalida.x = color->x * ambiental;
	colorSalida.y = color->y * ambiental;
	colorSalida.z = color->z * ambiental;

	//DIFUSOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
	vector3 vec_luz;
	vec_luz.x = luz->x - point->x;
	vec_luz.y = luz->y - point->y;
	vec_luz.z = luz->z - point->z;

	normaliza(&vec_luz);
 
	float doc_prod = vec_luz.x * normal->x + vec_luz.y * normal->y + vec_luz.z * normal->z;

	if (doc_prod > 0)
	{
		doc_prod *= difuso;
		colorSalida.x += doc_prod * color->x;
		colorSalida.y += doc_prod * color->y;
		colorSalida.z += doc_prod * color->z;
		//Especulaaar
		vector3 rVect; //l - 2 dot (l,n)n

		vec_luz.x = -vec_luz.x;
		vec_luz.y = -vec_luz.y;
		vec_luz.z = -vec_luz.z;

		rVect.x = vec_luz.x - 2.0f * (vec_luz.x * normal->x + vec_luz.y * normal->y + vec_luz.z * normal->z) * normal->x;
		rVect.y = vec_luz.y - 2.0f * (vec_luz.x * normal->x + vec_luz.y * normal->y + vec_luz.z * normal->z) * normal->y;
		rVect.z = vec_luz.z - 2.0f * (vec_luz.x * normal->x + vec_luz.y * normal->y + vec_luz.z * normal->z) * normal->z;

		vector3 dirCam;
		dirCam.x = camera->x - point->x;
		dirCam.y = camera->y - point->y;
		dirCam.z = camera->z - point->z;

		normaliza(&dirCam);
		/*dirCam.x = -dirCam.x;
		dirCam.y = -dirCam.y;
		dirCam.z = -dirCam.z;*/
		//doc(v,r)
		float dotVR = rVect.x * dirCam.x + rVect.y * dirCam.y + rVect.z * dirCam.z;

		dotVR *= powf(dotVR, 20) * specular;

		colorSalida.x += dotVR * color->x;
		colorSalida.y += dotVR * color->y;
		colorSalida.z += dotVR * color->z;
	}
	else
	{
		doc_prod = 0;
	}

	

	colorSalida.x = min(255, (int)roundf( colorSalida.x ));
	colorSalida.y = min(255, (int)roundf(colorSalida.y ));
	colorSalida.z = min(255, (int)roundf(colorSalida.z ));
	return colorSalida;
}

__global__ void rayCasting(vector3* camera, light* luz, vector3* pi_corner, uchar* output, sphere* objects, int width, int heigth, float inc_x, float inc_y)
{
	//columna
	int i = blockDim.x * blockIdx.x + threadIdx.x;
	//fila
	int j = blockDim.y * blockIdx.y + threadIdx.y;

	if (i < width && j < heigth)
	{
		int idx = j * width*3 + i*3;
		ray primary;
		primary.o_x = camera->x;
		primary.o_y = camera->y;
		primary.o_z = camera->z;

		vector3 dest;
		dest.x = pi_corner->x + inc_x * i;
		dest.y = pi_corner->y - inc_y * j;
		dest.z = 1;

		primary.dir_x = dest.x - primary.o_x;
		primary.dir_y = dest.y - primary.o_y;
		primary.dir_z = dest.z - primary.o_z;

		float aux = sqrtf(primary.dir_x * primary.dir_x + primary.dir_y * primary.dir_y + primary.dir_z * primary.dir_z);
		primary.dir_x /= aux;
		primary.dir_y /= aux;
		primary.dir_z /= aux;
		//llenamos de un color
		float dist;
		dist = 0;
		if (sphereInter(&primary, objects, &dist))
		{
			vector3 interPoint;
			interPoint.x = primary.dir_x * dist;
			interPoint.y = primary.dir_y * dist;
			interPoint.z = primary.dir_z * dist;
			vector3 normal;
			normal.x = interPoint.x - objects->x;
			normal.y = interPoint.y - objects->y;
			normal.z = interPoint.z - objects->z;

			normaliza(&normal);
			vector3 color;
			color.x = objects->r;
			color.y = objects->g;
			color.z = objects->b;

			color = phongShading(luz, &interPoint, &normal, camera, &color);
			output[idx] = color.y;
			output[idx+1] = color.x;
			output[idx+2] = color.z;
		}
		else
		{
			output[idx] = 30;
			output[idx+1] = 30;
			output[idx+2] = 30;

		}
		

	}

}

int main()
{
	int width = 720, height = 720;
	int pixelSize = width * height;

	float pi_width = 2.0;
	float  pi_height = (height / width) * pi_width;
	uchar* img_dev;

	sphere* esf1 = (sphere*)malloc(sizeof(sphere));

	esf1->x = 0;
	esf1->y = 0;
	esf1->z = 5;
	esf1->radio = 1;
	esf1->r = 255;
	esf1->g = 254;
	esf1->b = 0;

	light* luz = (light*)malloc(sizeof(light));
	luz->x =0;
	luz->y = 4;
	luz->z = 5;
	luz->r = 255;
	luz->g = 255;
	luz->b = 255;
	luz->radio = 1;

	vector3* camera = (vector3*)malloc(sizeof(vector3));
	camera->x = 0;
	camera->y = 0;
	camera->z = 0;

	vector3* img_corner = (vector3*)malloc(sizeof(vector3));
	img_corner->x = -1;
	img_corner->y = pi_height / 2.0;
	img_corner->z = 1;


	float inc_x = pi_width / width;
	float inc_y = pi_height / height;

	dim3 threads(16, 16);
	dim3 blocks(ceil((float)width / (float)threads.x), ceil((float)height / (float)threads.y));

	vector3* camera_dev, * img_corner_dev;
	sphere* esf1_dev;
	light* luz_dev;

	cudaMalloc(&img_dev, pixelSize * sizeof(uchar)*3 );
	cudaMalloc(&camera_dev, sizeof(vector3));
	cudaMalloc(&img_corner_dev, sizeof(vector3));
	cudaMalloc(&esf1_dev, sizeof(sphere));
	cudaMalloc(&luz_dev, sizeof(light));


	cudaMemcpy(camera_dev, camera, sizeof(vector3), cudaMemcpyHostToDevice);
	cudaMemcpy(img_corner_dev, img_corner, sizeof(vector3), cudaMemcpyHostToDevice);
	cudaMemcpy(esf1_dev, esf1, sizeof(sphere), cudaMemcpyHostToDevice);
	cudaMemcpy(luz_dev, luz, sizeof(light), cudaMemcpyHostToDevice);


	rayCasting << <blocks, threads >> > (camera_dev, luz_dev, img_corner_dev, img_dev, esf1_dev, width, height, inc_x, inc_y);

	cv::Mat frame = cv::Mat(cv::Size(width, height), CV_8UC3);
	cudaMemcpy(frame.data, img_dev, width * height *3, cudaMemcpyDeviceToHost);
	
	cv::imshow("salida", frame);
	cv::waitKey(0);
}